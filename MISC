-- File: misc.lua
-- Collection of utility functions for Roblox with improved error handling
local Misc = {}

-- WalkSpeed Modifier
Misc.WalkSpeed = function(speed)
    local Players = game:GetService("Players")
    local player = Players.LocalPlayer
    
    if player and player.Character and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid.WalkSpeed = speed
    end
end

-- Infinite Jump
Misc.InfiniteJump = function(toggle)
    local UserInputService = game:GetService("UserInputService")
    local Players = game:GetService("Players")
    local player = Players.LocalPlayer
    
    local connection
    
    if toggle then
        connection = UserInputService.InputBegan:Connect(function(input)
            if input.KeyCode == Enum.KeyCode.Space then
                if player and player.Character and player.Character:FindFirstChild("Humanoid") then
                    player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
            end
        end)
    else
        if connection then
            connection:Disconnect()
        end
    end
    
    return connection
end

-- Fly Script (Simplified version)
Misc.Fly = function(toggle, speed)
    speed = speed or 50
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local UserInputService = game:GetService("UserInputService")
    local player = Players.LocalPlayer
    
    local flying = false
    local flyConnection
    local keyConnection
    local keys = {w=false, a=false, s=false, d=false, space=false, shift=false}
    
    local function startFly()
        if flying then return end
        
        local character = player.Character
        if not character or not character:FindFirstChild("HumanoidRootPart") then return end
        
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if not humanoid then return end
        
        humanoid:ChangeState(Enum.HumanoidStateType.Physics)
        flying = true
        
        keyConnection = UserInputService.InputBegan:Connect(function(input, processed)
            if processed then return end
            
            if input.KeyCode == Enum.KeyCode.W then
                keys.w = true
            elseif input.KeyCode == Enum.KeyCode.A then
                keys.a = true
            elseif input.KeyCode == Enum.KeyCode.S then
                keys.s = true
            elseif input.KeyCode == Enum.KeyCode.D then
                keys.d = true
            elseif input.KeyCode == Enum.KeyCode.Space then
                keys.space = true
            elseif input.KeyCode == Enum.KeyCode.LeftShift then
                keys.shift = true
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input, processed)
            if processed then return end
            
            if input.KeyCode == Enum.KeyCode.W then
                keys.w = false
            elseif input.KeyCode == Enum.KeyCode.A then
                keys.a = false
            elseif input.KeyCode == Enum.KeyCode.S then
                keys.s = false
            elseif input.KeyCode == Enum.KeyCode.D then
                keys.d = false
            elseif input.KeyCode == Enum.KeyCode.Space then
                keys.space = false
            elseif input.KeyCode == Enum.KeyCode.LeftShift then
                keys.shift = false
            end
        end)
        
        flyConnection = RunService.RenderStepped:Connect(function()
            if not character or not character:FindFirstChild("HumanoidRootPart") then
                flying = false
                if keyConnection then keyConnection:Disconnect() end
                if flyConnection then flyConnection:Disconnect() end
                return
            end
            
            local rootPart = character.HumanoidRootPart
            local camera = workspace.CurrentCamera
            local direction = Vector3.new(0, 0, 0)
            
            if keys.w then
                direction = direction + camera.CFrame.LookVector
            end
            if keys.s then
                direction = direction - camera.CFrame.LookVector
            end
            if keys.a then
                direction = direction - camera.CFrame.RightVector
            end
            if keys.d then
                direction = direction + camera.CFrame.RightVector
            end
            if keys.space then
                direction = direction + Vector3.new(0, 1, 0)
            end
            if keys.shift then
                direction = direction - Vector3.new(0, 1, 0)
            end
            
            if direction.Magnitude > 0 then
                direction = direction.Unit * speed
            end
            
            rootPart.Velocity = direction
        end)
    end
    
    local function stopFly()
        if not flying then return end
        
        local character = player.Character
        if character and character:FindFirstChildOfClass("Humanoid") then
            character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.GettingUp)
        end
        
        if keyConnection then
            keyConnection:Disconnect()
            keyConnection = nil
        end
        
        if flyConnection then
            flyConnection:Disconnect()
            flyConnection = nil
        end
        
        flying = false
    end
    
    if toggle then
        startFly()
    else
        stopFly()
    end
    
    return {
        Stop = stopFly,
        SetSpeed = function(newSpeed)
            speed = newSpeed
        end
    }
end

-- FullBright (FB)
Misc.FullBright = function(toggle)
    local Lighting = game:GetService("Lighting")
    
    -- Save original lighting properties
    local savedProperties = {
        Brightness = Lighting.Brightness,
        Ambient = Lighting.Ambient,
        OutdoorAmbient = Lighting.OutdoorAmbient,
        ClockTime = Lighting.ClockTime,
        FogEnd = Lighting.FogEnd
    }
    
    if toggle then
        Lighting.Brightness = 2
        Lighting.Ambient = Color3.fromRGB(255, 255, 255)
        Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)
        Lighting.ClockTime = 14
        Lighting.FogEnd = 100000
        
        -- Remove all lighting effects
        for _, effect in pairs(Lighting:GetChildren()) do
            if effect:IsA("BlurEffect") or effect:IsA("SunRaysEffect") or effect:IsA("ColorCorrectionEffect") then
                effect.Enabled = false
            end
        end
    else
        Lighting.Brightness = savedProperties.Brightness
        Lighting.Ambient = savedProperties.Ambient
        Lighting.OutdoorAmbient = savedProperties.OutdoorAmbient
        Lighting.ClockTime = savedProperties.ClockTime
        Lighting.FogEnd = savedProperties.FogEnd
        
        -- Restore lighting effects
        for _, effect in pairs(Lighting:GetChildren()) do
            if effect:IsA("BlurEffect") or effect:IsA("SunRaysEffect") or effect:IsA("ColorCorrectionEffect") then
                effect.Enabled = true
            end
        end
    end
end

-- Anti-AFK (Alternative approach that doesn't rely on VirtualUser)
Misc.AntiAFK = function(toggle)
    local Players = game:GetService("Players")
    local player = Players.LocalPlayer
    
    local antiAFKConnection
    
    if toggle then
        local lastActivityTime = tick()
        
        -- Function to simulate activity
        local function simulateActivity()
            local character = player.Character
            if character and character:FindFirstChild("Humanoid") then
                -- Small jump to simulate activity
                character.Humanoid.Jump = true
            end
            lastActivityTime = tick()
        end
        
        -- Connect to the Idled event
        antiAFKConnection = player.Idled:Connect(function()
            simulateActivity()
        end)
        
        -- Also periodically simulate activity as a fallback
        spawn(function()
            while antiAFKConnection and antiAFKConnection.Connected do
                if tick() - lastActivityTime > 120 then -- 2 minutes
                    simulateActivity()
                end
                wait(30) -- Check every 30 seconds
            end
        end)
    else
        if antiAFKConnection then
            antiAFKConnection:Disconnect()
            antiAFKConnection = nil
        end
    end
    
    return antiAFKConnection
end

-- Rejoin (RJ)
Misc.Rejoin = function()
    local TeleportService = game:GetService("TeleportService")
    local Players = game:GetService("Players")
    
    if #Players:GetPlayers() <= 1 then
        TeleportService:Teleport(game.PlaceId, Players.LocalPlayer)
    else
        TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, Players.LocalPlayer)
    end
end

-- Auto Rejoin (AutoRJ)
Misc.AutoRejoin = function(toggle)
    local CoreGui = game:GetService("CoreGui")
    local Players = game:GetService("Players")
    local TeleportService = game:GetService("TeleportService")
    
    local autoRejoinConnection
    
    if toggle then
        -- Try to detect when player is kicked
        autoRejoinConnection = CoreGui.RobloxPromptGui.promptOverlay.ChildAdded:Connect(function(child)
            if child.Name == "ErrorPrompt" and child:FindFirstChild("MessageArea") and child.MessageArea:FindFirstChild("ErrorFrame") then
                -- Wait a moment before trying to rejoin
                wait(1)
                TeleportService:Teleport(game.PlaceId, Players.LocalPlayer)
            end
        end)
    else
        if autoRejoinConnection then
            autoRejoinConnection:Disconnect()
            autoRejoinConnection = nil
        end
    end
    
    return autoRejoinConnection
end

-- Safe Server Hop (with better error handling)
Misc.ServerHop = function()
    local success, errorMsg = pcall(function()
        local TeleportService = game:GetService("TeleportService")
        local HttpService = game:GetService("HttpService")
        local Players = game:GetService("Players")
        
        -- Create notification function
        local function notify(text)
            if game:GetService("StarterGui") then
                game:GetService("StarterGui"):SetCore("SendNotification", {
                    Title = "Server Hop",
                    Text = text,
                    Duration = 3
                })
            end
            wait(0.1)
        end
        
        notify("Finding a server...")
        
        -- Function to get server list in a safe way
        local function fetchServers()
            local url = "https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?limit=100"
            local response = nil
            local success, errorMsg = pcall(function()
                response = HttpService:JSONDecode(game:HttpGet(url))
            end)
            
            if success and response and response.data then
                return response.data
            else
                notify("Error fetching servers: " .. (errorMsg or "Unknown error"))
                return {}
            end
        end
        
        local servers = fetchServers()
        
        -- Filter valid servers
        local validServers = {}
        for _, server in pairs(servers) do
            if server.playing < server.maxPlayers and server.id ~= game.JobId then
                table.insert(validServers, server)
            end
        end
        
        if #validServers > 0 then
            -- Sort by player count (descending)
            table.sort(validServers, function(a, b)
                return a.playing > b.playing
            end)
            
            -- Pick a random server from the top half
            local serverCount = #validServers
            local serverIndex = math.random(1, math.max(1, math.floor(serverCount / 2)))
            local targetServer = validServers[serverIndex]
            
            notify("Joining server with " .. targetServer.playing .. " players...")
            TeleportService:TeleportToPlaceInstance(game.PlaceId, targetServer.id, Players.LocalPlayer)
        else
            -- If no servers found, try to rejoin current place
            notify("No servers found. Rejoining current game...")
            TeleportService:Teleport(game.PlaceId, Players.LocalPlayer)
        end
    end)
    
    if not success then
        if game:GetService("StarterGui") then
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Error",
                Text = "Failed to server hop: " .. errorMsg,
                Duration = 5
            })
        end
    end
end

-- Low Server Hop (Simplified and with better error handling)
Misc.LowServerHop = function()
    local success, errorMsg = pcall(function()
        local TeleportService = game:GetService("TeleportService")
        local HttpService = game:GetService("HttpService")
        local Players = game:GetService("Players")
        
        -- Create notification function
        local function notify(text)
            if game:GetService("StarterGui") then
                game:GetService("StarterGui"):SetCore("SendNotification", {
                    Title = "Low Server Hop",
                    Text = text,
                    Duration = 3
                })
            end
            wait(0.1)
        end
        
        notify("Finding low population server...")
        
        -- Function to get server list in a safe way
        local function fetchServers()
            local url = "https://games.roblox.com/v1/games/"..game.PlaceId.."/servers/Public?limit=100"
            local response = nil
            local success, errorMsg = pcall(function()
                response = HttpService:JSONDecode(game:HttpGet(url))
            end)
            
            if success and response and response.data then
                return response.data
            else
                notify("Error fetching servers: " .. (errorMsg or "Unknown error"))
                return {}
            end
        end
        
        local servers = fetchServers()
        
        -- Filter and sort by player count
        local validServers = {}
        for _, server in pairs(servers) do
            if server.id ~= game.JobId and server.playing < server.maxPlayers then
                table.insert(validServers, server)
            end
        end
        
        -- Sort by player count (ascending)
        table.sort(validServers, function(a, b)
            return a.playing < b.playing
        end)
        
        if #validServers > 0 then
            local targetServer = validServers[1] -- Server with lowest player count
            notify("Joining server with " .. targetServer.playing .. " players...")
            TeleportService:TeleportToPlaceInstance(game.PlaceId, targetServer.id, Players.LocalPlayer)
        else
            notify("No suitable servers found...")
        end
    end)
    
    if not success then
        if game:GetService("StarterGui") then
            game:GetService("StarterGui"):SetCore("SendNotification", {
                Title = "Error",
                Text = "Failed to low server hop: " .. errorMsg,
                Duration = 5
            })
        end
    end
end

return Misc
