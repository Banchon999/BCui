local TweenService = game:GetService("TweenService")
local InputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer

local Library = {
	["Theme"] = {
	        ["Font"] = "RobotoMono",
		["AccentColor"] = Color3.fromRGB(0,175,255),
		["FontColor"] = Color3.fromRGB(255,255,255),
		["HideKey"] = "LeftAlt",
                ["BackgroundColor"] = Color3.fromRGB(30,30,35),
                ["SectionColor"] = Color3.fromRGB(32,32,37),
                ["AnimationSpeed"] = 0.3,  -- Added animation speed control
                ["NotificationsEnabled"] = true, -- Enable/disable notifications
                ["ConfigSaving"] = true -- Enable/disable config saving
	},
        ["Config"] = {
                ["FolderName"] = "OceriumConfigs",
                ["FileName"] = "config.json"
        }
}

-- Create config folder if it doesn't exist
if Library["Theme"]["ConfigSaving"] then
    if not isfolder(Library["Config"]["FolderName"]) then
        makefolder(Library["Config"]["FolderName"])
    end
end

local CreateModule = {
    reg = {}
}

local function AddToReg(Instance)
    table.insert(CreateModule["reg"],Instance)
end

function CreateModule.Instance(instance,properties)
    local CreatedInstance

    if typeof(instance) == "string" then
        CreatedInstance = Instance.new(instance)
        
        for property,value in next,properties do
            CreatedInstance[property] = value
        end
    end
    return CreatedInstance;
end

local function Darker(Col,coe)
    local H,S,V = Color3.toHSV(Col)
    return Color3.fromHSV(H,S,V / (coe or 1.5));
end

local function Brighter(Col,coe)
    local H,S,V = Color3.toHSV(Col)
    return Color3.fromHSV(H,S,V * (coe or 1.5));
end

-- New utility functions
local function SaveConfig(config, filename)
    if not Library["Theme"]["ConfigSaving"] then return end
    
    local json = game:GetService("HttpService"):JSONEncode(config)
    writefile(Library["Config"]["FolderName"] .. "/" .. (filename or Library["Config"]["FileName"]), json)
end

local function LoadConfig(filename)
    if not Library["Theme"]["ConfigSaving"] then return {} end
    
    if isfile(Library["Config"]["FolderName"] .. "/" .. (filename or Library["Config"]["FileName"])) then
        local json = readfile(Library["Config"]["FolderName"] .. "/" .. (filename or Library["Config"]["FileName"]))
        return game:GetService("HttpService"):JSONDecode(json)
    else
        return {}
    end
end

function Library.Main(Name,X,Y)
        -- Create ConfigManager for UI
        local ConfigManager = {
            ["Settings"] = LoadConfig(), -- Load settings at start
            ["UIElements"] = {}, -- Store UI element references
        }

	for i,v in next,game.CoreGui:GetChildren() do
		if v.Name == "OcerLib" then
			v:Destroy()
		end
	end

	local OcerLib = CreateModule.Instance("ScreenGui",{
		Name = "OcerLib";
		Parent = game.CoreGui;
	})

    local Load = CreateModule.Instance("Frame",{
		Name = "LoadFrame";
		Parent = OcerLib;
		BackgroundColor3 = Library["Theme"]["BackgroundColor"];
        BackgroundTransparency = 1;
		BorderSizePixel = 0;
		Position = UDim2.new(0.3,0,0.25,0);
        ZIndex = 5;
	})

    local LoadCorner = CreateModule.Instance("UICorner",{
        Parent = Load;
        Name = "Corner";
        CornerRadius = UDim.new(0,5);
    })

    local Topbar = CreateModule.Instance("Frame",{
		Name = "Topbar";
		Parent = OcerLib;
		BackgroundColor3 = Darker(Library["Theme"]["BackgroundColor"],1.15);
		BorderSizePixel = 0;
		Position = UDim2.new(0.3,0,0.25,0);
		Size = UDim2.new(0,X,0,30);
        Active = true;
        Draggable = true;
        Visible = false;
        ZIndex = 3;
	})

    local Corner = CreateModule.Instance("UICorner",{
        Parent = Topbar;
        Name = "Corner";
        CornerRadius = UDim.new(0,5);
    })

    -- Add close button for UI
    local CloseButton = CreateModule.Instance("TextButton", {
        Parent = Topbar;
        Name = "CloseButton";
        BackgroundTransparency = 1;
        BorderSizePixel = 0;
        Position = UDim2.new(1, -25, 0, 0);
        Size = UDim2.new(0, 25, 0, 30);
        Font = Enum.Font[Library["Theme"]["Font"]];
        Text = "Ã—";
        TextSize = 20;
        TextColor3 = Library["Theme"]["FontColor"];
        ZIndex = 4;
    })
    
    CloseButton.MouseButton1Click:Connect(function()
        OcerLib:Destroy()
    end)
    
    -- Add minimize button
    local MinimizeButton = CreateModule.Instance("TextButton", {
        Parent = Topbar;
        Name = "MinimizeButton";
        BackgroundTransparency = 1;
        BorderSizePixel = 0;
        Position = UDim2.new(1, -50, 0, 0);
        Size = UDim2.new(0, 25, 0, 30);
        Font = Enum.Font[Library["Theme"]["Font"]];
        Text = "-";
        TextSize = 25;
        TextColor3 = Library["Theme"]["FontColor"];
        ZIndex = 4;
    })
    
    local minimized = false
    MinimizeButton.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            Container.Visible = false
            Topbar:TweenSize(UDim2.new(0, X, 0, 30), "Out", "Quad", 0.5, true)
        else
            Container.Visible = true
            Topbar:TweenSize(UDim2.new(0, X, 0, 30), "Out", "Quad", 0.5, true)
        end
    })

    Topbar.Changed:Connect(function(Property)
        if Property == "Position" then
            Load.Position = Topbar.Position
        end
    end)

	local NameLabel = CreateModule.Instance("TextLabel",{
		Parent = Topbar;
		Font = Enum.Font[Library["Theme"]["Font"]];
		Text = Name;
		TextSize = 16;
		TextColor3 = Library["Theme"]["FontColor"];
		TextXAlignment = Enum.TextXAlignment.Left;
		BackgroundTransparency = 1;
		BorderSizePixel = 0;
		Position = UDim2.new(0,10,0,0);
		Size = UDim2.new(0.2,0,1,0);
        ZIndex = 3;
	})

	--//ContainerCode

	local Container = CreateModule.Instance("Frame",{
		Parent = Topbar;
		Name = "Container";
		BackgroundColor3 = Library["Theme"]["BackgroundColor"];
		BorderSizePixel = 0;
		Position = UDim2.new(0,0,1,-5);
		Size = UDim2.new(1,0,0,Y);
        ClipsDescendants = true;
	})

    local Border = CreateModule.Instance("Frame",{
		Name = "Border";
		Parent = Topbar;
		BackgroundColor3 = Library["Theme"]["BackgroundColor"];
        BackgroundTransparency = 0.99;
		BorderSizePixel = 0;
		Position = UDim2.new(0,0,0,0);
        ZIndex = 5;
	})

    local StrokeBorder = CreateModule.Instance("UIStroke",{
        Parent = Border;
        Name = "Stroke";
        Thickness = 1;
        Color = Library["Theme"]["AccentColor"];
        Transparency = 0.5;
    })

    local CornerBorder = CreateModule.Instance("UICorner",{
        Parent = Border;
        Name = "Corner";
        CornerRadius = UDim.new(0,5);
    })

    Load.Size = UDim2.new(0,Topbar.Size.X.Offset,0,Topbar.Size.Y.Offset + Container.Size.Y.Offset -5);
    Border.Size = UDim2.new(0,Topbar.Size.X.Offset,0,Topbar.Size.Y.Offset + Container.Size.Y.Offset -5);
    spawn(function()
        wait(0.2)
        TweenService:Create(Load,TweenInfo.new(Library["Theme"]["AnimationSpeed"]),{BackgroundTransparency = 0}):Play()
        wait(0.45)
        TweenService:Create(Load,TweenInfo.new(Library["Theme"]["AnimationSpeed"]),{BackgroundTransparency = 1}):Play()
        Topbar.Visible = true
    end)
    local Corner = CreateModule.Instance("UICorner",{
        Parent = Container;
        Name = "Corner";
        CornerRadius = UDim.new(0,5);
    })

    local Pages = CreateModule.Instance("Frame",{
		Parent = Container;
		Name = "Tabs";
        BackgroundTransparency = 1;
		BorderSizePixel = 0;
		Position = UDim2.new(0,0,0,0);
		Size = UDim2.new(1,0,1,0);
	})

    local PageLayout = CreateModule.Instance("UIPageLayout",{
        Parent = Pages;
        Name = "PagesLayout";
        Padding = UDim.new(0,10);
        TweenTime = 0.3; -- Increased animation time for smoother transitions
        EasingDirection = Enum.EasingDirection.Out;
        EasingStyle = Enum.EasingStyle.Quint; -- Changed to Quint for smoother animation
        FillDirection = Enum.FillDirection.Vertical;
        HorizontalAlignment = Enum.HorizontalAlignment.Center;
    })

	local TabsButtons = CreateModule.Instance("Frame",{
		Parent = Topbar;
		Name = "TabsButtons";
        BackgroundTransparency = 1;
		BorderSizePixel = 0;
		Position = UDim2.new(0.3,0,0,0);
		Size = UDim2.new(0.5,0,1,0); -- Reduced size to make room for control buttons
        ZIndex = 3;
	})

	local ButtonsList = CreateModule.Instance("UIListLayout",{
		Parent = TabsButtons;
        FillDirection = Enum.FillDirection.Horizontal;
        SortOrder = Enum.SortOrder.LayoutOrder;
        Padding = UDim.new(0,10)
	})

    local IsGuiOpened = true

    InputService.InputBegan:Connect(function(input,IsTyping)
        if input.KeyCode == Enum.KeyCode[Library["Theme"]["HideKey"]] and not IsTyping then
            spawn(function()
                TweenService:Create(Load,TweenInfo.new(0.15),{BackgroundTransparency = 0}):Play()
                wait(0.2)
                TweenService:Create(Load,TweenInfo.new(0.3),{BackgroundTransparency = 1}):Play()
                Topbar.Visible = not Topbar.Visible
            end)
        end
    end)

    -- Notification System
    local NotificationFrame = CreateModule.Instance("Frame", {
        Parent = OcerLib;
        Name = "Notifications";
        BackgroundTransparency = 1;
        BorderSizePixel = 0;
        Position = UDim2.new(1, -330, 0, 20);
        Size = UDim2.new(0, 300, 1, -40);
        ZIndex = 10;
    })
    
    local NotificationList = CreateModule.Instance("UIListLayout", {
        Parent = NotificationFrame;
        Padding = UDim.new(0, 10);
        FillDirection = Enum.FillDirection.Vertical;
        HorizontalAlignment = Enum.HorizontalAlignment.Right;
        VerticalAlignment = Enum.VerticalAlignment.Top;
        SortOrder = Enum.SortOrder.LayoutOrder;
    })

	local InMain = {}
    local TabCount = 0

    -- Improved Notification function
    function InMain.Notification(HeaderText, Text, Duration, Type)
        if not Library["Theme"]["NotificationsEnabled"] then return end
        
        Duration = Duration or 5
        Type = Type or "Info" -- "Info", "Success", "Warning", "Error"
        
        local TypeColors = {
            ["Info"] = Library["Theme"]["AccentColor"],
            ["Success"] = Color3.fromRGB(50, 205, 50),
            ["Warning"] = Color3.fromRGB(255, 165, 0),
            ["Error"] = Color3.fromRGB(255, 58, 58)
        }
        
        local NotifColor = TypeColors[Type] or TypeColors["Info"]
        
        local Bar = CreateModule.Instance("Frame", {
            Parent = NotificationFrame;
            Name = HeaderText;
            BackgroundColor3 = Library["Theme"]["SectionColor"];
            BorderSizePixel = 0;
            Position = UDim2.new(1, 0, 0, 0);
            Size = UDim2.new(1, 0, 0, 80);
            ClipsDescendants = true;
        })
        
        local BarCorner = CreateModule.Instance("UICorner", {
            Parent = Bar;
            CornerRadius = UDim.new(0, 5);
        })
        
        local BarStroke = CreateModule.Instance("UIStroke", {
            Parent = Bar;
            Color = NotifColor;
            Thickness = 1;
            ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
        })
        
        local TypeIndicator = CreateModule.Instance("Frame", {
            Parent = Bar;
            Name = "TypeIndicator";
            BackgroundColor3 = NotifColor;
            BorderSizePixel = 0;
            Position = UDim2.new(0, 0, 0, 0);
            Size = UDim2.new(0, 5, 1, 0);
        })
        
        local TypeCorner = CreateModule.Instance("UICorner", {
            Parent = TypeIndicator;
            CornerRadius = UDim.new(0, 5);
        })

        local HeaderLabel = CreateModule.Instance("TextLabel", {
            Parent = Bar;
            Font = Enum.Font[Library["Theme"]["Font"]];
            Text = HeaderText;
            TextSize = 18;
            TextColor3 = NotifColor;
            TextXAlignment = Enum.TextXAlignment.Left;
            BackgroundTransparency = 1;
            BorderSizePixel = 0;
            Position = UDim2.new(0, 15, 0, 10);
            Size = UDim2.new(1, -20, 0, 20);
        })
        
        local CloseButton = CreateModule.Instance("TextButton", {
            Parent = Bar;
            Name = "CloseButton";
            BackgroundTransparency = 1;
            BorderSizePixel = 0;
            Position = UDim2.new(1, -25, 0, 5);
            Size = UDim2.new(0, 20, 0, 20);
            Font = Enum.Font[Library["Theme"]["Font"]];
            Text = "Ã—";
            TextSize = 20;
            TextColor3 = Library["Theme"]["FontColor"];
        })

        local InformationLabel = CreateModule.Instance("TextLabel", {
            Parent = Bar;
            Font = Enum.Font[Library["Theme"]["Font"]];
            Text = Text;
            TextSize = 15;
            TextColor3 = Library["Theme"]["FontColor"];
            TextXAlignment = Enum.TextXAlignment.Left;
            TextYAlignment = Enum.TextYAlignment.Top;
            TextWrapped = true;
            BackgroundTransparency = 1;
            BorderSizePixel = 0;
            Position = UDim2.new(0, 15, 0, 35);
            Size = UDim2.new(1, -25, 0, 35);
        })
        
        -- Animation
        TweenService:Create(Bar, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Position = UDim2.new(0, 0, 0, 0)}):Play()
        
        -- Auto close
        CloseButton.MouseButton1Click:Connect(function()
            TweenService:Create(Bar, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Position = UDim2.new(1, 0, 0, 0)}):Play()
            wait(0.5)
            Bar:Destroy()
        end)
        
        spawn(function()
            wait(Duration)
            if Bar and Bar.Parent then
                TweenService:Create(Bar, TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {Position = UDim2.new(1, 0, 0, 0)}):Play()
                wait(0.5)
                if Bar and Bar.Parent then
                    Bar:Destroy()
                end
            end
        end)
        
        return Bar
    end

	function InMain.Tab(Text)
        TabCount += 1

		local TabButton = CreateModule.Instance("TextButton",{
			Parent = TabsButtons;
			Name = Text;
            BackgroundTransparency = 1;
			BorderSizePixel = 0;
			Position = UDim2.new(0,0,0,0);
			Size = UDim2.new(0.15,0,1,0);
			Font = Enum.Font[Library["Theme"]["Font"]];
			Text = Text;
			TextSize = 15;
			TextXAlignment = Enum.TextXAlignment.Center;
			AutoButtonColor = false;
            AutomaticSize = Enum.AutomaticSize.X;
            ZIndex = 3;
		})

        local IsTabActive = CreateModule.Instance("BoolValue",{
            Parent = TabButton;
            Name = "IsActive";
            Value = (TabCount == 1 and true or TabCount ~= 1 and false)
        })

        TabButton.TextColor3 = (IsTabActive.Value and Library["Theme"]["FontColor"] or not IsTabActive.Value and Darker(Library["Theme"]["FontColor"],2))
        
        -- Add indicator for active tab
        local TabIndicator = CreateModule.Instance("Frame", {
            Parent = TabButton;
            Name = "Indicator";
            BackgroundColor3 = Library["Theme"]["AccentColor"];
            BorderSizePixel = 0;
            Position = UDim2.new(0.5, -10, 1, -2);
            Size = UDim2.new(0, 20, 0, 2);
            Visible = IsTabActive.Value;
            ZIndex = 3;
        })
        
        local IndicatorCorner = CreateModule.Instance("UICorner", {
            Parent = TabIndicator;
            CornerRadius = UDim.new(0, 1);
        })

		TabButton.MouseEnter:Connect(function()
            if IsTabActive.Value then
                TweenService:Create(TabButton,TweenInfo.new(0.3),{TextColor3 = Library["Theme"]["FontColor"]}):Play()
            else
                TweenService:Create(TabButton,TweenInfo.new(0.3),{TextColor3 = Darker(Library["Theme"]["FontColor"],1.5)}):Play()
            end
		end)

		TabButton.MouseLeave:Connect(function()
            if not IsTabActive.Value then
			    TweenService:Create(TabButton,TweenInfo.new(0.3),{TextColor3 = Darker(Library["Theme"]["FontColor"],2)}):Play()
            else
                TweenService:Create(TabButton,TweenInfo.new(0.3),{TextColor3 = Darker(Library["Theme"]["FontColor"],1.2)}):Play()
            end
		end)

        local Page = CreateModule.Instance("ScrollingFrame",{
            Parent = Pages;
            Name = Text;
            BackgroundTransparency = 1;
            BorderSizePixel = 0;
            Position = UDim2.new(0,0,0,0);
            Size = UDim2.new(0.95,0,1,0);
            CanvasSize = UDim2.new(0,0,0,0);
            AutomaticCanvasSize = Enum.AutomaticSize.Y;
            ScrollBarThickness = 2; -- Reduced thickness for a more modern look
            ScrollBarImageColor3 = Library["Theme"]["AccentColor"]; -- Accent color for scrollbar
            ScrollBarImageTransparency = 0.5; -- Semi-transparent scrollbar
        })

        local PageList = CreateModule.Instance("Frame",{
            Parent = Page;
            Name = "PageList";
            BackgroundTransparency = 1;
            BorderSizePixel = 0;
            Position = UDim2.new(0.015,0,0.015,0);
            Size = UDim2.new(0.5,0,1,0);
        })

        local PageList2 = CreateModule.Instance("Frame",{
            Parent = Page;
            Name = "PageList2";
            BackgroundTransparency = 1;
            BorderSizePixel = 0;
            Position = UDim2.new(0.52,0,0.015,0);
            Size = UDim2.new(0.5,0,1,0);
        })

        local ElementsList = CreateModule.Instance("UIListLayout",{
            Parent = PageList;
            Padding = UDim.new(0,15);
            HorizontalAlignment = Enum.HorizontalAlignment.Left;
            SortOrder = Enum.SortOrder.LayoutOrder;
        })

        local ElementsList2 = CreateModule.Instance("UIListLayout",{
            Parent = PageList2;
            Padding = UDim.new(0,15);
            HorizontalAlignment = Enum.HorizontalAlignment.Left;
            SortOrder = Enum.SortOrder.LayoutOrder;
        })

        local Fader = CreateModule.Instance("Frame",{
            Parent = Page;
            Name = 'Fader';
            BackgroundColor3 = Library["Theme"]["BackgroundColor"];
            BorderSizePixel = 0;
            Position = UDim2.new(0,0,0,0);
            Size = UDim2.new(1,0,1,0);
            ZIndex = 2;
        })

        local ign = CreateModule.Instance("Frame",{
            Parent = PageList;
            Name = 'ign';
            BackgroundTransparency = 1;
            BorderSizePixel = 0;
            Position = UDim2.new(0,0,0,0);
            Size = UDim2.new(0,0,0,0);
            LayoutOrder = -99;
        })

        local ign2 = CreateModule.Instance("Frame",{
            Parent = PageList;
            Name = 'ign';
            BackgroundTransparency = 1;
            BorderSizePixel = 0;
            Position = UDim2.new(0,0,0,0);
            Size = UDim2.new(0,0,0,5);
            LayoutOrder = 999;
        })

        local ign3 = CreateModule.Instance("Frame",{
            Parent = PageList2;
            Name = 'ign';
            BackgroundTransparency = 1;
            BorderSizePixel = 0;
            Position = UDim2.new(0,0,0,0);
            Size = UDim2.new(0,0,0,0);
            LayoutOrder = -99;
        })

        local ign4 = CreateModule.Instance("Frame",{
            Parent = PageList2;
            Name = 'ign';
            BackgroundTransparency = 1;
            BorderSizePixel = 0;
            Position = UDim2.new(0,0,0,0);
            Size = UDim2.new(0,0,0,5);
            LayoutOrder = 999;
        })

        TabButton.MouseButton1Click:Connect(function()
            for i,v in next,Pages:GetChildren() do
                if v.Name ~= Text and v:FindFirstChild("Fader") then
                    TweenService:Create(v.Fader,TweenInfo.new(0.3),{BackgroundTransparency = 0}):Play()
                    spawn(function()
                        wait(0.32)
                        PageLayout:JumpTo(Page)
                        TweenService:Create(Fader,TweenInfo.new(0.3),{BackgroundTransparency = 1}):Play()
                    end)
                end
            end

            for i,v in next,TabsButtons:GetChildren() do
                if v.ClassName == "TextButton" and v.Name ~= Text then
                    v.IsActive.Value = false
                    TweenService:Create(v,TweenInfo.new(0.3),{TextColor3 = Darker(Library["Theme"]["FontColor"],2)}):Play()
                    v.Indicator.Visible = false
                end
            end
            IsTabActive.Value = true
            TweenService:Create(TabButton,TweenInfo.new(0.3),{TextColor3 = Library["Theme"]["FontColor"]}):Play()
            TabIndicator.Visible = true
        end)

        if TabCount == 1 then
            PageLayout:JumpTo(Page)
            TweenService:Create(Fader,TweenInfo.new(0.3),{BackgroundTransparency = 1}):Play()
        end
        local InPage = {}

        function InPage.Section(Text)
            local InSection = {}

            local Column = PageList
            if ElementsList.AbsoluteContentSize.Y > ElementsList2.AbsoluteContentSize.Y then
                Column = PageList2
            end

            local Section = CreateModule.Instance("Frame",{
                Parent = Column;
                Name = Text;
                BackgroundColor3 = Darker(Library["Theme"]["SectionColor"],1.15);
                BorderSizePixel = 0;
                BorderColor3 = Brighter(Library["Theme"]["SectionColor"],1.5);
                Position = UDim2.new(0,0,0,0);
                Size = UDim2.new(0.95,0,0,30);
                AutomaticSize = Enum.AutomaticSize.Y;
            })

            local Corner = CreateModule.Instance("UICorner",{
                Parent = Section;
                Name = "Corner";
                CornerRadius = UDim.new(0,5);
            })

            local Stroke = CreateModule.Instance("UIStroke",{
                Parent = Section;
                Name = "Stroke";
                Thickness = 1;
                Color = Color3.fromRGB(40,40,40);
                ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
            })

            local SectionLabel = CreateModule.Instance("TextLabel",{
                Parent = Section;
                Font = Enum.Font[Library["Theme"]["Font"]];
                Text = Text;
                TextSize = 16;
                TextColor3 = Library["Theme"]["FontColor"];
                TextXAlignment = Enum.TextXAlignment.Left;
                BackgroundTransparency = 1;
                BorderSizePixel = 0;
                Position = UDim2.new(0,5,0,1);
                Size = UDim2.new(1,0,0,20);
            })

            
            local SectionElements = CreateModule.Instance("Frame",{
                Parent = Section;
                Name = Text;
                BackgroundTransparency = 1;
                BorderSizePixel = 0;
                Position = UDim2.new(0,0,0,0);
                Size = UDim2.new(1,0,1,0);
            })

            local SectionList = CreateModule.Instance("UIListLayout",{
                Parent = SectionElements;
                Padding = UDim.new(0,5);
                HorizontalAlignment = Enum.HorizontalAlignment.Center;
                SortOrder = Enum.SortOrder.LayoutOrder;
            })

            local ign = CreateModule.Instance("Frame",{
                Parent = SectionElements;
                Name = 'ign';
                BackgroundTransparency = 1;
                BorderSizePixel = 0;
                Position = UDim2.new(0,0,0,0);
                Size = UDim2.new(0,0,0,20);
                LayoutOrder = -999;
            })

            local ign2 = CreateModule.Instance("Frame",{
                Parent = SectionElements;
                Name = 'ign';
                BackgroundTransparency = 1;
                BorderSizePixel = 0;
                Position = UDim2.new(0,0,0,0);
                Size = UDim2.new(0,0,0,0);
                LayoutOrder = 999;
            })

            function InSection.Button(Text,func)
                local Button = CreateModule.Instance("TextButton",{
                    Parent = SectionElements;
                    Name = Text;
                    BackgroundColor3 = Darker(Library["Theme"]["SectionColor"],1.15);
                    BorderSizePixel = 1;
                    BorderColor3 = Color3.fromRGB(40,40,40);
                    Position = UDim2.new(0,0,0,0);
                    Size = UDim2.new(0.95,0,0,20);
                    Font = Enum.Font[Library["Theme"]["Font"]];
                    Text = Text;
                    TextSize = 16;
                    TextColor3 = Darker(Library["Theme"]["FontColor"],1.5);
                    TextXAlignment = Enum.TextXAlignment.Center;
                    TextYAlignment = Enum.TextYAlignment.Center;
                    AutoButtonColor = false;
                })

                local Corner = CreateModule.Instance("UICorner",{
                    Parent = Button;
                    Name = "Corner";
                    CornerRadius = UDim.new(0,5);
                })

                local Stroke = CreateModule.Instance("UIStroke",{
                    Parent = Button;
                    Name = "Stroke";
                    Thickness = 1;
                    Color = Color3.fromRGB(40,40,40);
                    ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
                })

                Button.MouseEnter:Connect(function()
                    TweenService:Create(Button,TweenInfo.new(0.3),{TextColor3 = Library["Theme"]["FontColor"]}):Play()
                    TweenService:Create(Button,TweenInfo.new(0.3),{BackgroundColor3 = Library["Theme"]["SectionColor"]}):Play()
                end)
        
                Button.MouseLeave:Connect(function()
                    TweenService:Create(Button,TweenInfo.new(0.3),{TextColor3 = Darker(Library["Theme"]["FontColor"],1.5)}):Play()
                    TweenService:Create(Button,TweenInfo.new(0.3),{BackgroundColor3 = Darker(Library["Theme"]["SectionColor"],1.15)}):Play()
                end)
                Button.MouseButton1Click:Connect(function()
                    -- Add ripple effect
                    local Ripple = CreateModule.Instance("Frame", {
                        Parent = Button;
                        Name = "Ripple";
                        BackgroundColor3 = Color3.fromRGB(255, 255, 255);
                        BackgroundTransparency = 0.7;
                        BorderSizePixel = 0;
                        Position = UDim2.new(0.5, 0, 0.5, 0);
                        AnchorPoint = Vector2.new(0.5, 0.5);
                        Size = UDim2.new(0, 0, 0, 0);
                        ZIndex = 2;
                    })
                    
                    local RippleCorner = CreateModule.Instance("UICorner", {
                        Parent = Ripple;
                        CornerRadius = UDim.new(1, 0);
                    })
                    
                    TweenService:Create(Ripple, TweenInfo.new(0.5), {
                        Size = UDim2.new(1.5, 0, 1.5, 0),
                        BackgroundTransparency = 1
                    }):Play()
                    
                    spawn(function()
                        wait(0.5)
                        Ripple:Destroy()
                    end)
                    
                    spawn(function() func() end)
                end)
                
                -- Save to config system
                ConfigManager["UIElements"][Text .. "_Button"] = {
                    Type = "Button",
                    Instance = Button
                }
                
                AddToReg(Button)
                return Button;
            end
            
            function InSection.KeyBind(Text,func,defkey)
                local Keybind = CreateModule.Instance("TextLabel",{
                    Parent = SectionElements;
                    Name = Text or "Keybind";
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    Position = UDim2.new(0,0,0,0);
                    Size = UDim2.new(0.95,0,0,25);
                    Font = Enum.Font[Library["Theme"]["Font"]];
                    Text = "";
                    TextSize = 16;
                    TextColor3 = Darker(Library["Theme"]["FontColor"],1.5);
                    TextXAlignment = Enum.TextXAlignment.Left;
                })

                local Label = CreateModule.Instance("TextLabel",{
                    Parent = Keybind;
                    Name = "Label";
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    BorderColor3 = Color3.fromRGB(60,60,60);
                    Position = UDim2.new(0,60,0,0);
                    Size = UDim2.new(1,-50,1,0);
                    Font = Enum.Font[Library["Theme"]["Font"]];
                    TextColor3 = Darker(Library["Theme"]["FontColor"],1.5);
                    Text = Text;
                    TextSize = 16;
                    TextXAlignment = Enum.TextXAlignment.Left;
                })

                local Keybinder = CreateModule.Instance("TextButton",{
                    Parent = Keybind;
                    BackgroundColor3 = Darker(Library["Theme"]["SectionColor"],1.15);
                    BorderSizePixel = 0;
                    AnchorPoint = Vector2.new(0,0.5);
                    Position = UDim2.new(0,0,0.5,0);
                    Size = UDim2.new(0,50,0,20);
                    Font = Enum.Font[Library["Theme"]["Font"]];
                    Text = defkey or "...";
                    TextSize = 16;
                    TextColor3 = Darker(Library["Theme"]["FontColor"],1.5);
                    TextXAlignment = Enum.TextXAlignment.Center;
                    AutoButtonColor = false;
                })

                local Corner = CreateModule.Instance("UICorner",{
                    Parent = Keybinder;
                    Name = "Corner";
                    CornerRadius = UDim.new(0,5);
                })

                local Stroke = CreateModule.Instance("UIStroke",{
                    Parent = Keybinder;
                    Name = "Stroke";
                    Thickness = 1;
                    Color = Color3.fromRGB(40,40,40);
                    ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
                })

                local Picked,Picking = false

                local Key = defkey or nil
                
                -- Load from config
                if ConfigManager["Settings"][Text .. "_Keybind"] then
                    Key = ConfigManager["Settings"][Text .. "_Keybind"]
                    Keybinder.Text = Key
                end
                
                InputService.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.Keyboard and Picking and input.KeyCode ~= Enum.KeyCode[Library["Theme"]["HideKey"]] then
                        Key = tostring(input.KeyCode):gsub("Enum.KeyCode.","")
                        Picked = true
                        
                        -- Save to config
                        ConfigManager["Settings"][Text .. "_Keybind"] = Key
                        if Library["Theme"]["ConfigSaving"] then
                            SaveConfig(ConfigManager["Settings"])
                        end
                    elseif input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode == Enum.KeyCode[Key] and not Picking then
                        -- Trigger function when key is pressed
                        spawn(function() func(Key) end)
                    end
                end)

                Keybinder.MouseButton1Click:Connect(function()
                    Picking = true
                    Keybinder.Text = "..."
                    spawn(function()
                        repeat wait() until Picked
                        Keybinder.Text = Key
                        spawn(function() func(Key) end)
                        Picking = false
                        Picked = false
                    end)
                end)
                
                -- Save to elements registry
                ConfigManager["UIElements"][Text .. "_Keybind"] = {
                    Type = "Keybind",
                    Instance = Keybinder,
                    Value = Key
                }
                
                AddToReg(Keybind)
                return Keybind;
            end
            
            function InSection.Checkbox(Text,func,defbool)
                local Checkbox = CreateModule.Instance("TextButton",{
                    Parent = SectionElements;
                    Name = Text;
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    BorderColor3 = Color3.fromRGB(60,60,60);
                    Position = UDim2.new(0,0,0,0);
                    Size = UDim2.new(0.95,0,0,20);
                    Font = Enum.Font[Library["Theme"]["Font"]];
                    Text = "";
                    TextSize = 16;
                    TextXAlignment = Enum.TextXAlignment.Left;
                    AutoButtonColor = false;
                })

                local Corner1 = CreateModule.Instance("UICorner",{
                    Parent = Checkbox;
                    Name = "Corner";
                    CornerRadius = UDim.new(0,5);
                })

                local Stroke1 = CreateModule.Instance("UIStroke",{
                    Parent = Checkbox;
                    Name = "Stroke";
                    Thickness = 1;
                    Color = Color3.fromRGB(40,40,40);
                    ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
                })

                local Label = CreateModule.Instance("TextLabel",{
                    Parent = Checkbox;
                    Name = "Label";
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    BorderColor3 = Color3.fromRGB(60,60,60);
                    Position = UDim2.new(0,27,0,0);
                    Size = UDim2.new(1,-25,1,0);
                    Font = Enum.Font[Library["Theme"]["Font"]];
                    Text = Text;
                    TextSize = 16;
                    TextXAlignment = Enum.TextXAlignment.Left;
                })

                local IsActive = CreateModule.Instance("BoolValue",{
                    Parent = Checkbox;
                    Name = "IsActive";
                })
                
                -- Load from config
                if ConfigManager["Settings"][Text .. "_Checkbox"] ~= nil then
                    IsActive.Value = ConfigManager["Settings"][Text .. "_Checkbox"]
                else
                    IsActive.Value = defbool or false
                end

                Label.TextColor3 = (IsActive.Value and Library["Theme"]["FontColor"] or not IsActive.Value and Darker(Library["Theme"]["FontColor"],1.5))

                local Checked = CreateModule.Instance("Frame",{
                    Parent = Checkbox;
                    Name = 'Cube';
                    BackgroundTransparency = 0;
                    BackgroundColor3 = (IsActive.Value and Library["Theme"]["AccentColor"] or not IsActive.Value and Darker(Library["Theme"]["SectionColor"],1.15));
                    BorderSizePixel = 0;
                    AnchorPoint = Vector2.new(0,0.5);
                    Position = UDim2.new(0,5,0.5,0);
                    Size = UDim2.new(0,15,0,15);
                })

                local Corner = CreateModule.Instance("UICorner",{
                    Parent = Checked;
                    Name = "Corner";
                    CornerRadius = UDim.new(0,5);
                })

                local Stroke = CreateModule.Instance("UIStroke",{
                    Parent = Checked;
                    Name = "Stroke";
                    Thickness = 1;
                    Color = Color3.fromRGB(40,40,40);
                })
                
                -- Add checkmark icon
                local Checkmark = CreateModule.Instance("ImageLabel", {
                    Parent = Checked;
                    Name = "Checkmark";
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    AnchorPoint = Vector2.new(0.5, 0.5);
                    Position = UDim2.new(0.5, 0, 0.5, 0);
                    Size = UDim2.new(0.7, 0, 0.7, 0);
                    Image = "rbxassetid://3926305904";
                    ImageRectOffset = Vector2.new(4, 836);
                    ImageRectSize = Vector2.new(44, 36);
                    ImageColor3 = Color3.fromRGB(255, 255, 255);
                    ImageTransparency = IsActive.Value and 0 or 1;
                })

                IsActive.Changed:Connect(function()
                    if IsActive.Value then
                        TweenService:Create(Label,TweenInfo.new(0.3),{TextColor3 = Library["Theme"]["FontColor"]}):Play()
                        TweenService:Create(Checked,TweenInfo.new(0.3),{BackgroundColor3 = Library["Theme"]["AccentColor"]}):Play()
                        TweenService:Create(Checkmark,TweenInfo.new(0.3),{ImageTransparency = 0}):Play()
                        spawn(function() func(IsActive.Value) end)
                    else
                        TweenService:Create(Checked,TweenInfo.new(0.3),{BackgroundColor3 = Darker(Library["Theme"]["SectionColor"],1.15)}):Play()
                        TweenService:Create(Label,TweenInfo.new(0.3),{TextColor3 = Darker(Library["Theme"]["FontColor"],1.5)}):Play()
                        TweenService:Create(Checkmark,TweenInfo.new(0.3),{ImageTransparency = 1}):Play()
                        spawn(function() func(IsActive.Value) end)
                    end
                    
                    -- Save to config
                    ConfigManager["Settings"][Text .. "_Checkbox"] = IsActive.Value
                    if Library["Theme"]["ConfigSaving"] then
                        SaveConfig(ConfigManager["Settings"])
                    end
                end)

                Checkbox.MouseButton1Click:Connect(function()
                    IsActive.Value = not IsActive.Value
                end)
                
                -- Save to elements registry
                ConfigManager["UIElements"][Text .. "_Checkbox"] = {
                    Type = "Checkbox",
                    Instance = Checkbox,
                    Value = IsActive
                }
                
                AddToReg(Checkbox)
                return Checkbox;
            end
            function InSection.Slider(Text,min,max,func,precise,defvalue)
                local Slider = CreateModule.Instance("TextLabel",{
                    Parent = SectionElements;
                    Name = Text;
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    BorderColor3 = Color3.fromRGB(60,60,60);
                    Position = UDim2.new(0,22,0,0);
                    Size = UDim2.new(0.95,0,0,40);
                    Font = Enum.Font[Library["Theme"]["Font"]];
                    TextColor3 = Darker(Library["Theme"]["FontColor"],1.5);
                    Text = Text;
                    TextSize = 16;
                    TextXAlignment = Enum.TextXAlignment.Center;
                    TextYAlignment = Enum.TextYAlignment.Top;
                })

                local Bar = CreateModule.Instance("Frame",{
                    Parent = Slider;
                    Name = 'Bar';
                    BackgroundTransparency = 0;
                    BackgroundColor3 = Darker(Library["Theme"]["SectionColor"],1.15);
                    BorderSizePixel = 0;
                    AnchorPoint = Vector2.new(0,0.5);
                    Position = UDim2.new(0,0,0.75,0);
                    Size = UDim2.new(1,0,0,20);
                    ClipsDescendants = true;
                })

                local ValueLabel = CreateModule.Instance("TextLabel",{
                    Parent = Bar;
                    Name = "Label";
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    BorderColor3 = Color3.fromRGB(60,60,60);
                    Position = UDim2.new(0,0,0,0);
                    Size = UDim2.new(1,0,1,0);
                    Font = Enum.Font[Library["Theme"]["Font"]];
                    TextColor3 = Darker(Library["Theme"]["FontColor"],1.5);
                    Text = tostring(defvalue) .. "/".. max  or tostring(min) .. "/".. max ;
                    TextSize = 16;
                    TextXAlignment = Enum.TextXAlignment.Center;
                    ZIndex = 2;
                })

                local Progress = CreateModule.Instance("Frame",{
                    Parent = Bar;
                    Name = 'Progress';
                    BackgroundTransparency = 0;
                    BackgroundColor3 = Darker(Library["Theme"]["SectionColor"],1.05);
                    BorderSizePixel = 0;
                    AnchorPoint = Vector2.new(0,0.5);
                    Position = UDim2.new(0,0,0.5,0);
                    Size = UDim2.new(0,0,1,0);
                })
                
                -- Add a thumb/handle for better UI/UX
                local Thumb = CreateModule.Instance("Frame", {
                    Parent = Bar;
                    Name = "Thumb";
                    BackgroundColor3 = Library["Theme"]["AccentColor"];
                    BorderSizePixel = 0;
                    AnchorPoint = Vector2.new(0.5, 0.5);
                    Position = UDim2.new(0, 0, 0.5, 0);
                    Size = UDim2.new(0, 10, 0, 20);
                    ZIndex = 3;
                    Visible = false; -- Only show when hovering
                })
                
                local ThumbCorner = CreateModule.Instance("UICorner", {
                    Parent = Thumb;
                    CornerRadius = UDim.new(1, 0);
                })

                local Corner = CreateModule.Instance("UICorner",{
                    Parent = Bar;
                    Name = "Corner";
                    CornerRadius = UDim.new(0,5);
                })

                local Stroke = CreateModule.Instance("UIStroke",{
                    Parent = Bar;
                    Name = "Stroke";
                    Thickness = 1;
                    Color = Color3.fromRGB(40,40,40);
                })

                local Corner2 = CreateModule.Instance("UICorner",{
                    Parent = Progress;
                    Name = "Corner";
                    CornerRadius = UDim.new(0,5);
                })

                -- Load from config
                local initialValue = defvalue
                if ConfigManager["Settings"][Text .. "_Slider"] then
                    initialValue = ConfigManager["Settings"][Text .. "_Slider"] 
                end

				local function UpdateSlider(val)
					local percent = (val - min) / (max - min)
					percent = math.clamp(percent, 0, 1)

					Progress:TweenSize(UDim2.new(percent, 0, 1, 0),"Out","Sine",0.3,true)
                    Thumb.Position = UDim2.new(percent, 0, 0.5, 0)
				end

				UpdateSlider(initialValue or defvalue or min)

				local IsSliding,Dragging = false
				local RealValue = initialValue or defvalue or min
				local value
				local function move(Pressed)
					IsSliding = true;
					local pos = UDim2.new(math.clamp((Pressed.Position.X - Bar.AbsolutePosition.X) / Bar.AbsoluteSize.X, 0, 1), 0, 1, 0)
					local size = UDim2.new(math.clamp((Pressed.Position.X - Bar.AbsolutePosition.X) / Bar.AbsoluteSize.X, 0, 1), 0, 1, 0)
					Progress:TweenSize(size, "Out", "Quart", 0.2,true);
                    Thumb.Position = UDim2.new(pos.X.Scale, 0, 0.5, 0)
					RealValue = (((pos.X.Scale * max) / max) * (max - min) + min)
					value = (precise and string.format("%.1f", tostring(RealValue))) or (math.floor(RealValue))
					ValueLabel.Text = tostring(value) .. "/".. max 
					func(value)
                    
                    -- Save to config
                    ConfigManager["Settings"][Text .. "_Slider"] = value
                    if Library["Theme"]["ConfigSaving"] then
                        SaveConfig(ConfigManager["Settings"])
                    end
				end

				Bar.InputBegan:Connect(function(Pressed)
					if Pressed.UserInputType == Enum.UserInputType.MouseButton1 then
						Dragging = true
						IsSliding = false
                        Thumb.Visible = true
                        move(Pressed)
                        TweenService:Create(Progress,TweenInfo.new(0.3),{BackgroundColor3 = Darker(Library["Theme"]["AccentColor"],1.2)}):Play()
					end
				end)

				Bar.InputEnded:Connect(function(Pressed)
					if Pressed.UserInputType == Enum.UserInputType.MouseButton1 then
						Dragging = false
						IsSliding = false
                        if not Bar.IsHovered then
                            Thumb.Visible = false
                        end
                        TweenService:Create(Progress,TweenInfo.new(0.3),{BackgroundColor3 = Darker(Library["Theme"]["AccentColor"],1.7)}):Play()
                        move(Pressed)
					end
				end)

				game:GetService("UserInputService").InputChanged:Connect(function(Pressed)
					if Dragging and Pressed.UserInputType == Enum.UserInputType.MouseMovement then
                        move(Pressed)
					end
				end)

				Bar.MouseEnter:Connect(function()
					TweenService:Create(Progress,TweenInfo.new(0.3),{BackgroundColor3 = Darker(Library["Theme"]["AccentColor"],1.7)}):Play()
                    Thumb.Visible = true
				end)

				Bar.MouseLeave:Connect(function()
					if not Dragging then
						TweenService:Create(Progress,TweenInfo.new(0.3),{BackgroundColor3 = Darker(Library["Theme"]["SectionColor"],1.05)}):Play()
                        Thumb.Visible = false
					end
                    if Dragging then
                        spawn(function()
                            repeat wait() until not Dragging
                            TweenService:Create(Progress,TweenInfo.new(0.3),{BackgroundColor3 = Darker(Library["Theme"]["SectionColor"],1.05)}):Play()
                            Thumb.Visible = false
                        end)
                    end
				end)
                
                -- Save to elements registry
                ConfigManager["UIElements"][Text .. "_Slider"] = {
                    Type = "Slider",
                    Instance = Slider,
                    Value = value or initialValue or defvalue or min
                }
                
                AddToReg(Slider)
                return Slider;
            end
            
            function InSection.Dropdown(Text,Selectables,ind,func)
                local Dropdown = CreateModule.Instance("Frame",{
                    Parent = SectionElements;
                    Name = Text;
                    BackgroundColor3 = Darker(Library["Theme"]["SectionColor"],1.15);
                    BorderSizePixel = 0;
                    BorderColor3 = Color3.fromRGB(40,40,40);
                    Position = UDim2.new(0,0,0,0);
                    Size = UDim2.new(0.95,0,0,20);
                    ClipsDescendants = true;
                })
                local DropdownButton = CreateModule.Instance("TextButton",{
                    Parent = Dropdown;
                    Name = "DropdownButton";
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    BorderColor3 = Color3.fromRGB(40,40,40);
                    Position = UDim2.new(0,0,0,0);
                    Size = UDim2.new(1,0,0,20);
                    Font = Enum.Font[Library["Theme"]["Font"]];
                    Text = "  " .. Text;
                    TextSize = 16;
                    TextColor3 = Darker(Library["Theme"]["FontColor"],1.5);
                    TextXAlignment = Enum.TextXAlignment.Left;
                    TextYAlignment = Enum.TextYAlignment.Center;
                    AutoButtonColor = false;
                })

                local DropdownImage = CreateModule.Instance("ImageLabel",{
                    Parent = DropdownButton;
                    AnchorPoint = Vector2.new(0, 0.5);
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255);
                    BackgroundTransparency = 1.000;
                    BorderSizePixel = 0;
                    Position = UDim2.new(0.9, 0, 0.5, 0);
                    Size = UDim2.new(0, 20, 0, 20);
                    Image = "rbxassetid://3926305904";
                    ImageColor3 = Color3.fromRGB(136, 136, 136);
                    ImageRectOffset = Vector2.new(44, 404);
                    ImageRectSize = Vector2.new(36, 36);
                    Rotation = 0;
                })
                
                -- Add search bar for dropdown
                local SearchBar = CreateModule.Instance("TextBox", {
                    Parent = Dropdown;
                    Name = "SearchBar";
                    BackgroundColor3 = Darker(Library["Theme"]["SectionColor"], 1.05);
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 0, 0, 20);
                    Size = UDim2.new(1, 0, 0, 20);
                    Font = Enum.Font[Library["Theme"]["Font"]];
                    PlaceholderText = "Search...";
                    Text = "";
                    TextSize = 14;
                    TextColor3 = Library["Theme"]["FontColor"];
                    PlaceholderColor3 = Darker(Library["Theme"]["FontColor"], 1.5);
                    TextXAlignment = Enum.TextXAlignment.Left;
                    TextYAlignment = Enum.TextYAlignment.Center;
                    Visible = false;
                    ClearTextOnFocus = false;
                })
                
                local SearchPadding = CreateModule.Instance("UIPadding", {
                    Parent = SearchBar;
                    PaddingLeft = UDim.new(0, 5);
                })
                
                local SearchIcon = CreateModule.Instance("ImageLabel", {
                    Parent = SearchBar;
                    AnchorPoint = Vector2.new(1, 0.5);
                    BackgroundTransparency = 1;
                    Position = UDim2.new(1, -5, 0.5, 0);
                    Size = UDim2.new(0, 15, 0, 15);
                    Image = "rbxassetid://3926305904";
                    ImageRectOffset = Vector2.new(964, 324);
                    ImageRectSize = Vector2.new(36, 36);
                    ImageColor3 = Darker(Library["Theme"]["FontColor"], 1.5);
                })

                local List = CreateModule.Instance("ScrollingFrame",{
                    Parent = Dropdown;
                    Name = 'List';
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    Position = UDim2.new(0,0,0,40); -- Adjusted for search bar
                    Size = UDim2.new(1,0,0,0);
                    CanvasSize = UDim2.new(0,0,0,0);
                    AutomaticCanvasSize = Enum.AutomaticSize.Y;
                    ScrollBarThickness = 3;
                    ScrollBarImageColor3 = Library["Theme"]["AccentColor"];
                    ScrollBarImageTransparency = 0.5;
                })

                local DropdownList = CreateModule.Instance("UIListLayout",{
                    Parent = List;
                    Padding = UDim.new(0,5);
                    HorizontalAlignment = Enum.HorizontalAlignment.Center;
                    SortOrder = Enum.SortOrder.LayoutOrder;
                })

                CreateModule.Instance("Frame",{
                    Parent = List;
                    Name = 'ign';
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    Position = UDim2.new(0,0,0,0);
                    Size = UDim2.new(0,0,0,0);
                    LayoutOrder = -99999;
                })

                local Corner = CreateModule.Instance("UICorner",{
                    Parent = Dropdown;
                    Name = "Corner";
                    CornerRadius = UDim.new(0,5);
                })

                local Stroke = CreateModule.Instance("UIStroke",{
                    Parent = Dropdown;
                    Name = "Stroke";
                    Thickness = 1;
                    Color = Color3.fromRGB(40,40,40);
                    ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
                })

                local IsOpened = false
                local SelectablesTable = {}
                
                -- Setup search functionality
                SearchBar.Changed:Connect(function(prop)
                    if prop == "Text" then
                        local searchText = string.lower(SearchBar.Text)
                        for _, selectable in pairs(SelectablesTable) do
                            local name = selectable.Name
                            if searchText == "" then
                                selectable.Visible = true
                            else
                                selectable.Visible = string.find(string.lower(name), searchText) ~= nil
                            end
                        end
                    end
                end)

                DropdownButton.MouseButton1Click:Connect(function()
                    IsOpened = not IsOpened
                    if IsOpened then
                        Dropdown:TweenSize(UDim2.new(0.95,0,0,160),"Out","Quint",0.3,true) -- Increased size
                        List:TweenSize(UDim2.new(1,0,0,100),"Out","Quint",0.3,true)
                        SearchBar.Visible = true
                        TweenService:Create(DropdownImage,TweenInfo.new(0.3),{Rotation = 180}):Play()
                    else
                        Dropdown:TweenSize(UDim2.new(0.95,0,0,20),"Out","Quint",0.3,true)
                        List:TweenSize(UDim2.new(1,0,0,0),"Out","Quint",0.3,true)
                        SearchBar.Visible = false
                        SearchBar.Text = ""
                        TweenService:Create(DropdownImage,TweenInfo.new(0.3),{Rotation = 0}):Play()
                    end
                end)

                local function NewSelectable(string,value)
                    local Selectable = CreateModule.Instance("TextButton",{
                        Parent = List;
                        Name = string;
                        BackgroundTransparency = 1;
                        BorderSizePixel = 0;
                        BorderColor3 = Color3.fromRGB(40,40,40);
                        Position = UDim2.new(0,0,0,0);
                        Size = UDim2.new(0.95,0,0,20);
                        Font = Enum.Font[Library["Theme"]["Font"]];
                        Text = "  " .. string;
                        TextSize = 16;
                        TextColor3 = Darker(Library["Theme"]["FontColor"],1.5);
                        TextXAlignment = Enum.TextXAlignment.Left;
                        TextYAlignment = Enum.TextYAlignment.Center;
                        AutoButtonColor = false;
                    })

                    local Corner = CreateModule.Instance("UICorner",{
                        Parent = Selectable;
                        Name = "Corner";
                        CornerRadius = UDim.new(0,5);
                    })
    
                    local Stroke = CreateModule.Instance("UIStroke",{
                        Parent = Selectable;
                        Name = "Stroke";
                        Thickness = 1;
                        Color = Color3.fromRGB(40,40,40);
                        ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
                    })

                    Selectable.MouseEnter:Connect(function()
                        TweenService:Create(Selectable,TweenInfo.new(0.3),{TextColor3 = Library["Theme"]["FontColor"]}):Play()
                        TweenService:Create(Selectable,TweenInfo.new(0.3),{BackgroundColor3 = Library["Theme"]["SectionColor"]}):Play()
                    end)
            
                    Selectable.MouseLeave:Connect(function()
                        TweenService:Create(Selectable,TweenInfo.new(0.3),{TextColor3 = Darker(Library["Theme"]["FontColor"],1.5)}):Play()
                        TweenService:Create(Selectable,TweenInfo.new(0.3),{BackgroundColor3 = Darker(Library["Theme"]["SectionColor"],1.15)}):Play()
                    end)

                    Selectable.MouseButton1Click:Connect(function()
                        spawn(function() func(string,value) end)
                        DropdownButton.Text = "  " .. string
                        Dropdown:TweenSize(UDim2.new(0.95,0,0,20),"Out","Quint",0.3,true)
                        List:TweenSize(UDim2.new(1,0,0,0),"Out","Quint",0.3,true)
                        SearchBar.Visible = false
                        SearchBar.Text = ""
                        TweenService:Create(DropdownImage,TweenInfo.new(0.3),{Rotation = 0}):Play()
                        IsOpened = false
                        
                        -- Save to config
                        ConfigManager["Settings"][Text .. "_Dropdown"] = string
                        if Library["Theme"]["ConfigSaving"] then
                            SaveConfig(ConfigManager["Settings"])
                        end
                    end)
                    
                    table.insert(SelectablesTable, Selectable)
                    return Selectable
                end
                
                -- Load selected value from config
                local configSelected = ConfigManager["Settings"][Text .. "_Dropdown"]

                for string,value in next,Selectables do
                    if ind == 1 then
                        NewSelectable(tostring(string),tostring(value))
                        if configSelected and tostring(string) == configSelected then
                            DropdownButton.Text = "  " .. tostring(string)
                        end
                    elseif ind == 2 then
                        NewSelectable(tostring(value),tostring(string))
                        if configSelected and tostring(value) == configSelected then
                            DropdownButton.Text = "  " .. tostring(value)
                        end
                    end
                end
                
                local InDropdown = {}
                function InDropdown.Refresh(selec)
                    for i,v in next,List:GetChildren() do
                        if v.ClassName == "TextButton" then
                            v:Destroy()
                        end
                    end
                    
                    -- Clear the selectables table
                    table.clear(SelectablesTable)
                    
                    wait()
                    for string,value in next,selec do
                        if ind == 1 then
                            NewSelectable(tostring(string),tostring(value))
                        elseif ind == 2 then
                            NewSelectable(tostring(value),tostring(string))
                        end
                    end
                end
                
                -- Save to elements registry
                ConfigManager["UIElements"][Text .. "_Dropdown"] = {
                    Type = "Dropdown",
                    Instance = Dropdown,
                    Refresh = InDropdown.Refresh,
                    Options = Selectables
                }
                
                AddToReg(Dropdown)
                return InDropdown;
            end
            
            -- New UI Elements
            
            -- TextBox element
            function InSection.TextBox(Text, PlaceholderText, func, deftext)
                local TextboxFrame = CreateModule.Instance("Frame", {
                    Parent = SectionElements;
                    Name = Text;
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 0, 0, 0);
                    Size = UDim2.new(0.95, 0, 0, 40);
                })
                
                local TextboxLabel = CreateModule.Instance("TextLabel", {
                    Parent = TextboxFrame;
                    Font = Enum.Font[Library["Theme"]["Font"]];
                    Text = Text;
                    TextSize = 16;
                    TextColor3 = Library["Theme"]["FontColor"];
                    TextXAlignment = Enum.TextXAlignment.Left;
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 5, 0, 0);
                    Size = UDim2.new(1, -5, 0, 20);
                })
                
                local TextBox = CreateModule.Instance("TextBox", {
                    Parent = TextboxFrame;
                    BackgroundColor3 = Darker(Library["Theme"]["SectionColor"], 1.15);
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 0, 0.5, 0);
                    Size = UDim2.new(1, 0, 0.5, 0);
                    Font = Enum.Font[Library["Theme"]["Font"]];
                    PlaceholderText = PlaceholderText or "Enter text...";
                    Text = deftext or "";
                    PlaceholderColor3 = Darker(Library["Theme"]["FontColor"], 1.5);
                    TextColor3 = Library["Theme"]["FontColor"];
                    TextSize = 14;
                    TextXAlignment = Enum.TextXAlignment.Left;
                    ClearTextOnFocus = false;
                })
                
                local BoxPadding = CreateModule.Instance("UIPadding", {
                    Parent = TextBox;
                    PaddingLeft = UDim.new(0, 5);
                })
                
                local BoxCorner = CreateModule.Instance("UICorner", {
                    Parent = TextBox;
                    CornerRadius = UDim.new(0, 5);
                })
                
                local BoxStroke = CreateModule.Instance("UIStroke", {
                    Parent = TextBox;
                    Thickness = 1;
                    Color = Color3.fromRGB(40, 40, 40);
                    ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
                })
                
                -- Load from config
                if ConfigManager["Settings"][Text .. "_TextBox"] then
                    TextBox.Text = ConfigManager["Settings"][Text .. "_TextBox"]
                end
                
                TextBox.FocusLost:Connect(function(enterPressed)
                    spawn(function() func(TextBox.Text, enterPressed) end)
                    
                    -- Save to config
                    ConfigManager["Settings"][Text .. "_TextBox"] = TextBox.Text
                    if Library["Theme"]["ConfigSaving"] then
                        SaveConfig(ConfigManager["Settings"])
                    end
                end)
                
                -- Save to elements registry
                ConfigManager["UIElements"][Text .. "_TextBox"] = {
                    Type = "TextBox",
                    Instance = TextBox,
                    Value = TextBox.Text
                }
                
                AddToReg(TextboxFrame)
                return TextboxFrame;
            end
            
            -- ColorPicker element
            function InSection.ColorPicker(Text, func, defcolor)
                local ColorPickerFrame = CreateModule.Instance("Frame", {
                    Parent = SectionElements;
                    Name = Text;
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 0, 0, 0);
                    Size = UDim2.new(0.95, 0, 0, 25);
                })
                
                local ColorPickerLabel = CreateModule.Instance("TextLabel", {
                    Parent = ColorPickerFrame;
                    Font = Enum.Font[Library["Theme"]["Font"]];
                    Text = Text;
                    TextSize = 16;
                    TextColor3 = Library["Theme"]["FontColor"];
                    TextXAlignment = Enum.TextXAlignment.Left;
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 25, 0, 0);
                    Size = UDim2.new(1, -25, 1, 0);
                })
                
                local ColorDisplay = CreateModule.Instance("Frame", {
                    Parent = ColorPickerFrame;
                    BackgroundColor3 = defcolor or Color3.fromRGB(255, 255, 255);
                    BorderSizePixel = 0;
                    AnchorPoint = Vector2.new(0, 0.5);
                    Position = UDim2.new(0, 0, 0.5, 0);
                    Size = UDim2.new(0, 20, 0, 20);
                })
                
                local ColorCorner = CreateModule.Instance("UICorner", {
                    Parent = ColorDisplay;
                    CornerRadius = UDim.new(0, 5);
                })
                
                local ColorStroke = CreateModule.Instance("UIStroke", {
                    Parent = ColorDisplay;
                    Thickness = 1;
                    Color = Color3.fromRGB(40, 40, 40);
                    ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
                })
                
                -- ColorPicker popup
                local ColorPicker = CreateModule.Instance("Frame", {
                    Parent = ColorPickerFrame;
                    Name = "ColorPickerPopup";
                    BackgroundColor3 = Darker(Library["Theme"]["SectionColor"], 1.05);
                    BorderSizePixel = 0;
                    Position = UDim2.new(1, 20, 0, 0);
                    Size = UDim2.new(0, 200, 0, 220);
                    Visible = false;
                    ZIndex = 10;
                })
                
                local ColorPickerCorner = CreateModule.Instance("UICorner", {
                    Parent = ColorPicker;
                    CornerRadius = UDim.new(0, 5);
                })
                
                local ColorPickerStroke = CreateModule.Instance("UIStroke", {
                    Parent = ColorPicker;
                    Thickness = 1;
                    Color = Color3.fromRGB(40, 40, 40);
                    ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
                })
                
                -- Add color picker components (this is a simplified version)
                local ColorPickerTitle = CreateModule.Instance("TextLabel", {
                    Parent = ColorPicker;
                    Font = Enum.Font[Library["Theme"]["Font"]];
                    Text = "Color Picker";
                    TextSize = 16;
                    TextColor3 = Library["Theme"]["FontColor"];
                    TextXAlignment = Enum.TextXAlignment.Center;
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 0, 0, 5);
                    Size = UDim2.new(1, 0, 0, 20);
                    ZIndex = 10;
                })
                
                local ColorPickerClose = CreateModule.Instance("TextButton", {
                    Parent = ColorPicker;
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    Position = UDim2.new(1, -25, 0, 5);
                    Size = UDim2.new(0, 20, 0, 20);
                    Font = Enum.Font[Library["Theme"]["Font"]];
                    Text = "Ã—";
                    TextSize = 20;
                    TextColor3 = Library["Theme"]["FontColor"];
                    ZIndex = 10;
                })
                
                local HSVHolder = CreateModule.Instance("Frame", {
                    Parent = ColorPicker;
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255);
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 10, 0, 30);
                    Size = UDim2.new(0, 180, 0, 180);
                    ZIndex = 10;
                    ClipsDescendants = true;
                })
                
                local HSVCorner = CreateModule.Instance("UICorner", {
                    Parent = HSVHolder;
                    CornerRadius = UDim.new(0, 5);
                })
                
                local HSVImage = CreateModule.Instance("ImageLabel", {
                    Parent = HSVHolder;
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    Size = UDim2.new(1, 0, 1, 0);
                    Image = "rbxassetid://4155801252"; -- HSV color wheel
                    ZIndex = 10;
                })
                
                -- Color picker functionality
                local pickerOpen = false
                local currentColor = defcolor or Color3.fromRGB(255, 255, 255)
                
                -- Load from config
                if ConfigManager["Settings"][Text .. "_ColorPicker"] then
                    local savedColor = ConfigManager["Settings"][Text .. "_ColorPicker"]
                    currentColor = Color3.fromRGB(savedColor[1], savedColor[2], savedColor[3])
                    ColorDisplay.BackgroundColor3 = currentColor
                end
                
                ColorDisplay.MouseButton1Click:Connect(function()
                    pickerOpen = not pickerOpen
                    ColorPicker.Visible = pickerOpen
                end)
                
                ColorPickerClose.MouseButton1Click:Connect(function()
                    pickerOpen = false
                    ColorPicker.Visible = false
                end)
                
                HSVImage.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        local connection
                        connection = RunService.RenderStepped:Connect(function()
                            if not UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) then
                                connection:Disconnect()
                                return
                            end
                            
                            local mousePos = UserInputService:GetMouseLocation() - Vector2.new(0, game:GetService("GuiService"):GetGuiInset().Y)
                            local relativePos = mousePos - HSVHolder.AbsolutePosition
                            
                            -- Calculate color based on position (simplified)
                            local x = math.clamp(relativePos.X / HSVHolder.AbsoluteSize.X, 0, 1)
                            local y = math.clamp(relativePos.Y / HSVHolder.AbsoluteSize.Y, 0, 1)
                            
                            -- This is a simplified calculation - a real HSV picker would be more complex
                            currentColor = Color3.fromHSV(x, 1-y, 1)
                            
                            ColorDisplay.BackgroundColor3 = currentColor
                            spawn(function() func(currentColor) end)
                            
                            -- Save to config
                            ConfigManager["Settings"][Text .. "_ColorPicker"] = {currentColor.R * 255, currentColor.G * 255, currentColor.B * 255}
                            if Library["Theme"]["ConfigSaving"] then
                                SaveConfig(ConfigManager["Settings"])
                            end
                        end)
                    end
                end)
                
                -- Save to elements registry
                ConfigManager["UIElements"][Text .. "_ColorPicker"] = {
                    Type = "ColorPicker",
                    Instance = ColorDisplay,
                    Value = currentColor
                }
                
                AddToReg(ColorPickerFrame)
                return ColorPickerFrame;
            end
            
            -- Dynamic Label element
            function InSection.Label(Text)
                local LabelFrame = CreateModule.Instance("Frame", {
                    Parent = SectionElements;
                    Name = "Label_" .. Text;
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 0, 0, 0);
                    Size = UDim2.new(0.95, 0, 0, 20);
                })
                
                local Label = CreateModule.Instance("TextLabel", {
                    Parent = LabelFrame;
                    Font = Enum.Font[Library["Theme"]["Font"]];
                    Text = Text;
                    TextSize = 16;
                    TextColor3 = Library["Theme"]["FontColor"];
                    TextXAlignment = Enum.TextXAlignment.Left;
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 5, 0, 0);
                    Size = UDim2.new(1, -5, 1, 0);
                })
                
                local LabelObj = {}
                
                function LabelObj:SetText(NewText)
                    Label.Text = NewText
                end
                
                function LabelObj:SetColor(Color)
                    Label.TextColor3 = Color
                end
                
                AddToReg(LabelFrame)
                return LabelObj;
            end
            
            -- ProgressBar element
            function InSection.ProgressBar(Text, min, max, func, defvalue)
                local ProgressFrame = CreateModule.Instance("Frame", {
                    Parent = SectionElements;
                    Name = Text;
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 0, 0, 0);
                    Size = UDim2.new(0.95, 0, 0, 40);
                })
                
                local ProgressLabel = CreateModule.Instance("TextLabel", {
                    Parent = ProgressFrame;
                    Font = Enum.Font[Library["Theme"]["Font"]];
                    Text = Text;
                    TextSize = 16;
                    TextColor3 = Library["Theme"]["FontColor"];
                    TextXAlignment = Enum.TextXAlignment.Left;
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 5, 0, 0);
                    Size = UDim2.new(1, -5, 0, 20);
                })
                
                local ProgressBar = CreateModule.Instance("Frame", {
                    Parent = ProgressFrame;
                    BackgroundColor3 = Darker(Library["Theme"]["SectionColor"], 1.15);
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 0, 0.5, 0);
                    Size = UDim2.new(1, 0, 0, 20);
                })
                
                local ProgressCorner = CreateModule.Instance("UICorner", {
                    Parent = ProgressBar;
                    CornerRadius = UDim.new(0, 5);
                })
                
                local ProgressStroke = CreateModule.Instance("UIStroke", {
                    Parent = ProgressBar;
                    Thickness = 1;
                    Color = Color3.fromRGB(40, 40, 40);
                    ApplyStrokeMode = Enum.ApplyStrokeMode.Border;
                })
                
                local Progress = CreateModule.Instance("Frame", {
                    Parent = ProgressBar;
                    BackgroundColor3 = Library["Theme"]["AccentColor"];
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 0, 0, 0);
                    Size = UDim2.new(0, 0, 1, 0);
                })
                
                local ProgressFill = CreateModule.Instance("UICorner", {
                    Parent = Progress;
                    CornerRadius = UDim.new(0, 5);
                })
                
                local ProgressValue = CreateModule.Instance("TextLabel", {
                    Parent = ProgressBar;
                    Font = Enum.Font[Library["Theme"]["Font"]];
                    Text = "0/" .. max;
                    TextSize = 14;
                    TextColor3 = Library["Theme"]["FontColor"];
                    TextXAlignment = Enum.TextXAlignment.Center;
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 0, 0, 0);
                    Size = UDim2.new(1, 0, 1, 0);
                    ZIndex = 2;
                })
                
                -- Load from config
                local initialValue = defvalue or min
                if ConfigManager["Settings"][Text .. "_ProgressBar"] then
                    initialValue = ConfigManager["Settings"][Text .. "_ProgressBar"]
                end
                
                local ProgressObj = {}
                
                function ProgressObj:SetValue(value)
                    value = math.clamp(value, min, max)
                    local percent = (value - min) / (max - min)
                    
                    Progress:TweenSize(UDim2.new(percent, 0, 1, 0), "Out", "Quint", 0.3, true)
                    ProgressValue.Text = value .. "/" .. max
                    
                    if func then
                        func(value)
                    end
                    
                    -- Save to config
                    ConfigManager["Settings"][Text .. "_ProgressBar"] = value
                    if Library["Theme"]["ConfigSaving"] then
                        SaveConfig(ConfigManager["Settings"])
                    end
                end
                
                ProgressObj:SetValue(initialValue)
                
                -- Save to elements registry
                ConfigManager["UIElements"][Text .. "_ProgressBar"] = {
                    Type = "ProgressBar",
                    Instance = ProgressFrame,
                    SetValue = ProgressObj.SetValue,
                    Value = initialValue
                }
                
                AddToReg(ProgressFrame)
                return ProgressObj;
            end
            
            -- Toggle Switch element (more modern checkbox)
            function InSection.Toggle(Text, func, defbool)
                local ToggleFrame = CreateModule.Instance("Frame", {
                    Parent = SectionElements;
                    Name = Text;
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 0, 0, 0);
                    Size = UDim2.new(0.95, 0, 0, 30);
                })
                
                local ToggleLabel = CreateModule.Instance("TextLabel", {
                    Parent = ToggleFrame;
                    Font = Enum.Font[Library["Theme"]["Font"]];
                    Text = Text;
                    TextSize = 16;
                    TextColor3 = Library["Theme"]["FontColor"];
                    TextXAlignment = Enum.TextXAlignment.Left;
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 5, 0, 0);
                    Size = UDim2.new(1, -55, 1, 0);
                })
                
                local ToggleButton = CreateModule.Instance("TextButton", {
                    Parent = ToggleFrame;
                    BackgroundColor3 = Darker(Library["Theme"]["SectionColor"], 1.15);
                    BorderSizePixel = 0;
                    AnchorPoint = Vector2.new(1, 0.5);
                    Position = UDim2.new(1, 0, 0.5, 0);
                    Size = UDim2.new(0, 50, 0, 20);
                    Text = "";
                    AutoButtonColor = false;
                })
                
                local ToggleCorner = CreateModule.Instance("UICorner", {
                    Parent = ToggleButton;
                    CornerRadius = UDim.new(1, 0);
                })
                
                local ToggleCircle = CreateModule.Instance("Frame", {
                    Parent = ToggleButton;
                    BackgroundColor3 = Color3.fromRGB(255, 255, 255);
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 2, 0.5, 0);
                    AnchorPoint = Vector2.new(0, 0.5);
                    Size = UDim2.new(0, 16, 0, 16);
                })
                
                local CircleCorner = CreateModule.Instance("UICorner", {
                    Parent = ToggleCircle;
                    CornerRadius = UDim.new(1, 0);
                })
                
                local IsToggled = CreateModule.Instance("BoolValue", {
                    Parent = ToggleButton;
                    Name = "IsToggled";
                })
                
                -- Load from config
                if ConfigManager["Settings"][Text .. "_Toggle"] ~= nil then
                    IsToggled.Value = ConfigManager["Settings"][Text .. "_Toggle"]
                else
                    IsToggled.Value = defbool or false
                end
                
                -- Set initial state
                if IsToggled.Value then
                    ToggleButton.BackgroundColor3 = Library["Theme"]["AccentColor"]
                    ToggleCircle.Position = UDim2.new(1, -18, 0.5, 0)
                end
                
                IsToggled.Changed:Connect(function()
                    if IsToggled.Value then
                        TweenService:Create(ToggleButton, TweenInfo.new(0.3), {BackgroundColor3 = Library["Theme"]["AccentColor"]}):Play()
                        TweenService:Create(ToggleCircle, TweenInfo.new(0.3), {Position = UDim2.new(1, -18, 0.5, 0)}):Play()
                    else
                        TweenService:Create(ToggleButton, TweenInfo.new(0.3), {BackgroundColor3 = Darker(Library["Theme"]["SectionColor"], 1.15)}):Play()
                        TweenService:Create(ToggleCircle, TweenInfo.new(0.3), {Position = UDim2.new(0, 2, 0.5, 0)}):Play()
                    end
                    
                    spawn(function() func(IsToggled.Value) end)
                    
                    -- Save to config
                    ConfigManager["Settings"][Text .. "_Toggle"] = IsToggled.Value
                    if Library["Theme"]["ConfigSaving"] then
                        SaveConfig(ConfigManager["Settings"])
                    end
                end)
                
                ToggleButton.MouseButton1Click:Connect(function()
                    IsToggled.Value = not IsToggled.Value
                end)
                
                -- Save to elements registry
                ConfigManager["UIElements"][Text .. "_Toggle"] = {
                    Type = "Toggle",
                    Instance = ToggleButton,
                    Value = IsToggled
                }
                
                AddToReg(ToggleFrame)
                return {
                    Frame = ToggleFrame,
                    Set = function(value)
                        IsToggled.Value = value
                    end,
                    Get = function()
                        return IsToggled.Value
                    end
                };
            end
            
            -- Adding a separator element for better UI organization
            function InSection.Separator()
                local SeparatorFrame = CreateModule.Instance("Frame", {
                    Parent = SectionElements;
                    Name = "Separator";
                    BackgroundColor3 = Color3.fromRGB(60, 60, 60);
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 0, 0, 0);
                    Size = UDim2.new(0.95, 0, 0, 1);
                })
                
                AddToReg(SeparatorFrame)
                return SeparatorFrame;
            end
            
            -- Adding image display element
            function InSection.Image(ImageId, Size)
                local ImageFrame = CreateModule.Instance("Frame", {
                    Parent = SectionElements;
                    Name = "ImageFrame";
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    Position = UDim2.new(0, 0, 0, 0);
                    Size = UDim2.new(0.95, 0, 0, Size or 100);
                })
                
                local Image = CreateModule.Instance("ImageLabel", {
                    Parent = ImageFrame;
                    BackgroundTransparency = 1;
                    BorderSizePixel = 0;
                    Position = UDim2.new(0.5, 0, 0, 0);
                    AnchorPoint = Vector2.new(0.5, 0);
                    Size = UDim2.new(1, 0, 1, 0);
                    Image = ImageId;
                    ScaleType = Enum.ScaleType.Fit;
                })
                
                local ImageObj = {}
                
                function ImageObj:SetImage(NewImageId)
                    Image.Image = NewImageId
                end
                
                function ImageObj:SetSize(NewSize)
                    ImageFrame.Size = UDim2.new(0.95, 0, 0, NewSize)
                end
                
                AddToReg(ImageFrame)
                return ImageObj;
            end
            
            return InSection;
        end
        
        -- New function to save the current UI configuration
        function InPage.SaveConfig(filename)
            if Library["Theme"]["ConfigSaving"] then
                SaveConfig(ConfigManager["Settings"], filename)
                InMain.Notification("Config Saved", "Configuration has been saved to " .. filename, 3, "Success")
                return true
            else
                InMain.Notification("Config Error", "Config saving is disabled", 3, "Error")
                return false
            end
        end
        
        -- New function to load a UI configuration
        function InPage.LoadConfig(filename)
            if Library["Theme"]["ConfigSaving"] then
                local cfg = LoadConfig(filename)
                
                -- Apply the loaded settings to UI elements
                for id, data in pairs(ConfigManager["UIElements"]) do
                    if cfg[id] then
                        if data.Type == "Checkbox" then
                            data.Value.Value = cfg[id]
                        elseif data.Type == "Slider" then
                            -- Will trigger the change event automatically
                            if data.Instance.Label then
                                data.Instance.Label.Text = cfg[id] .. "/" .. data.Instance.Label.Text:split("/")[2]
                            end
                        elseif data.Type == "Toggle" then
                            data.Value.Value = cfg[id]
                        elseif data.Type == "TextBox" then
                            data.Instance.Text = cfg[id]
                        elseif data.Type == "Dropdown" then
                            data.Instance.DropdownButton.Text = "  " .. cfg[id]
                        elseif data.Type == "ColorPicker" and type(cfg[id]) == "table" then
                            data.Instance.BackgroundColor3 = Color3.fromRGB(cfg[id][1], cfg[id][2], cfg[id][3])
                        elseif data.Type == "KeyBind" then
                            data.Instance.Text = cfg[id]
                        end
                    end
                end
                
                InMain.Notification("Config Loaded", "Configuration has been loaded from " .. filename, 3, "Success")
                return true
            else
                InMain.Notification("Config Error", "Config loading is disabled", 3, "Error")
                return false
            end
        end
        
        return InPage;
	end
	return InMain;
end

return Library;
